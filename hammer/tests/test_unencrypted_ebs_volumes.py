from . import mock_ebs
from library.aws.ebs import EBSUnencryptedVolumesChecker
from library.aws.utility import Account


region = "us-east-1"
availability_zone = "us-east-1a"

ebs_volumes = {
    "Volume1":{
        "Description": "Unencrypted Volume",
        "AvailabilityZone": availability_zone,
        "Encrypted": False,
        "CheckShouldPass": False
    },
    "Volume2":{
        "Description": "Encrypted Volume",
        "AvailabilityZone": availability_zone,
        "Encrypted": True,
        "CheckShouldPass": True
    },
}

def find_volume_name(volume):
    for volume_name, props in ebs_volumes.items():
        if props["Id"] == volume.id:
            return volume_name
    return None

def ident_volume_test(volume):
    """
    Used to build identification string for each autogenerated test (for easy recognition of failed tests).

    :param volume: dict with information about rules from
                        describe_ebs_unencrypted_volumes.validate_unencrypted_ebs_volumes(...)
    :return: identification string with volume_id.
    """
    name = find_volume_name(volume)
    descr = ebs_volumes.get(name, {}).get("Description", "default description")
    return f"params: {name} ({descr})"

def pytest_generate_tests(metafunc):
    """
    Entrypoint for tests (built-in pytest function for dynamic generation of test cases).
    """
    # Launch EC2 mocking and env preparation
    mock_ebs.start()
    test_volumes = mock_ebs.create_env_volumes(ebs_volumes, region)

    account = Account(region=region)

    # validate ebs volumes in mocked env
    checker = EBSUnencryptedVolumesChecker(account)
    checker.check(ids=test_volumes)
    # create test cases for each response
    metafunc.parametrize("volume", checker.volumes, ids=ident_volume_test)


def test_volumes(volume):
    """
    Actual testing function.

    :param volume: dict with information about rules from
                        
    :return: nothing, raises AssertionError if actual test result is not matched with expected
    """
    name = find_volume_name(volume)
    expected = ebs_volumes.get(name, {})["CheckShouldPass"]
    assert expected == volume.encrypted