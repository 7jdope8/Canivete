import pytest


from . import mock_s3
from library.aws.s3 import S3BucketsAclChecker
from library.aws.utility import Account


buckets = {
    "Bucket1": {
        "Description": "Private bucket",
        "CheckShouldPass": True,
        "ACL": "private",
    },
    "Bucket2": {
        "Description": "Public read bucket",
        "CheckShouldPass": False,
        "ACL": "public-read",
    },
    "Bucket3": {
        "Description": "Public read-write bucket",
        "CheckShouldPass": False,
        "ACL": "public-read-write",
    },
    "Bucket4": {
        "Description": "Authenticated read bucket",
        "CheckShouldPass": False,
        "ACL": "authenticated-read",
    }
}


def find_rule_prop(bucket, prop, default):
    try:
        return buckets[bucket.name][prop]
    except KeyError:
        return default


def ident_test(arg):
    """
    Used to build identification string for each autogenerated test (for easy recognition of failed tests).

    :param bucket: dict with information about rules                        
    :return: .
    """
    # print(jsonDumps(s3acl_details))
    if isinstance(arg, bool):
        return "remediated" if arg else "original"
    else:
        descr = find_rule_prop(arg, "Description", "default description")
        return f"params: {arg.name} ({descr})"


def pytest_generate_tests(metafunc):
    """
    Entrypoint for tests (built-in pytest function for dynamic generation of test cases).
    """
    # Launch EC2 mocking and env preparation
    mock_s3.start()
    mock_s3.create_env(buckets)

    account = Account()

    checker = S3BucketsAclChecker(account)
    checker.check()

    for s3_bucket in checker.buckets:
        s3_bucket.restrict_acl()

    checker_remediated = S3BucketsAclChecker(account)
    checker_remediated.check()

    s3_buckets = [(bucket, False) for bucket in checker.buckets]
    s3_buckets += [(bucket, True) for bucket in checker_remediated.buckets]

    metafunc.parametrize("bucket,remediated", s3_buckets, ids=ident_test)

@pytest.mark.s3acl
def test_s3acl(bucket, remediated):
    """
    Actual testing function.

    :param bucket: 
    :param remediated
    :return: nothing, raises AssertionError if actual test result is not matched with expected
    """
    # print(f"{jsonDumps(s3acl_details)}")
    expected = True if remediated else find_rule_prop(bucket, "CheckShouldPass", True)
    assert expected == (not bucket.public_by_acl)


