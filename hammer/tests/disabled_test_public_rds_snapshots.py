import boto3

from . import mock_rds
from  library.aws.rds import RdsSnapshotsChecker


region = "us-east-1"
availability_zone = "us-east-1a"

rds_instances = {
    "rds_instance1":{
        "Description": "rds instance",
        "DBInstanceIdentifier": "test_rds_instance",
        "Engine": "mysql",
        "AllocatedStorage": 30,
        "DBInstanceClass": "db.m4.large"
    },
}

rds_cluster_instances = {
    "rds_cluster_instance":{
        "Description": "rds cluster instance",
        "DBInstanceIdentifier": "test_rds_cluster_instance",
        "Engine": "aurora"
    }
}

rds_snapshots = {
    "Snapshot1":{
        "Description": "Public snapshot",
        "DBSnapshotIdentifier": "public_snapshot_id",
        "IsPublicSnapshot": True,
        "CheckShouldPass": False
    },
    "Snapshot2":{
        "Description": "Private snapshot",
        "DBSnapshotIdentifier": "private_snapshot_id",
        "IsPublicSnapshot": False,
        "CheckShouldPass": True
    },
}

rds_cluster_snapshots = {
    "ClusterSnapshot1":{
        "Description": "Public cluster snapshot",
        "DBClusterSnapshotIdentifier": "public_cluster_snapshot_id",
        "IsPublicSnapshot": True,
        "CheckShouldPass": False
    },
    "ClusterSnapshot2":{
        "Description": "Private cluster snapshot",
        "DBClusterSnapshotIdentifier": "private_cluster_snapshot_id",
        "IsPublicSnapshot": False,
        "CheckShouldPass": True
    },
}

def find_snapshot_name(snapshot_details):
    snapshot_id = snapshot_details["snapshot_id"]
    for snapshot, props in rds_snapshots.items():
        if props["Id"] == snapshot_id:
            return snapshot
    return None

def ident_snapshot_test(snapshot_details):
    """
    Used to build identification string for each autogenerated test (for easy recognition of failed tests).

    :param snapshot_details: dict with information about rules from
                        RdsSnapshotsChecker(...)
    :return: identification string with snapshot_id.
    """

    name = find_snapshot_name(snapshot_details)
    descr = rds_snapshots.get(name, {}).get("Description", "default description")
    return f"params: {name} ({descr})"

def pytest_generate_tests(metafunc):
    """
    Entrypoint for tests (built-in pytest function for dynamic generation of test cases).
    """
    # Launch EC2 mocking and env preparation
    mock_rds.start()
    mock_rds.create_env_rds_snapshots(rds_instances, rds_snapshots, rds_cluster_instances, rds_cluster_snapshots, region)


    ec2_client = boto3.client("ec2", region)
    # validate rds snapshots in mocked env
    response = RdsSnapshotsChecker(ec2_client)
    # create test cases for each response
    metafunc.parametrize("snapshot_details", response, ids=ident_snapshot_test)


def test_snapshots(snapshot_details):
    """
    Actual testing function.

    :param snapshot_details: dict with information about rules from
                        RdsSnapshotsChecker(...)
    :return: nothing, raises AssertionError if actual test result is not matched with expected
    """
    name = find_snapshot_name(snapshot_details)
    expected = rds_snapshots.get(name, {})["CheckShouldPass"]
    assert expected == snapshot_details["CheckPassed"]