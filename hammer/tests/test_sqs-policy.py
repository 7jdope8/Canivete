import pytest


from . import mock_sqs
from library.aws.sqs import SQSPolicyChecker
from library.aws.utility import Account


region = "us-west-1"
queues = {
    "Queue": {
        "Description": "Queue without policy",
        "CheckShouldPass": True
    },
    "Queue1": {
        "Description": "Public queue",
        "CheckShouldPass": False,
        "Policy": """{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Sid":"AddPerm",
              "Effect":"Allow",
              "Principal": "*",
              "Action": "SQS:*",
              "Resource":["arn:aws:sqs:::Queue1"]
            }
          ]
        }"""
    }
}


def find_rule_prop(queue, prop, default):
    try:
        return queues[queue.name][prop]
    except KeyError:
        return default

def ident_test(arg):
    """
    Used to build identification string for each autogenerated test (for easy recognition of failed tests).

    :param arg: dict with information about rules from
    :return: identification string with security group name, rule index number and human-readable description.
    """
    if isinstance(arg, bool):
        return "remediated" if arg else "original"
    else:
        descr = find_rule_prop(arg, "Description", "default description")
        return f"params: {arg.name} ({descr})"


def pytest_generate_tests(metafunc):
    """
    Entrypoint for tests (built-in pytest function for dynamic generation of test cases).
    """
    # Launch EC2 mocking and env preparation
    mock_sqs.start()
    mock_sqs.create_env(queues, region)

    account = Account(region=region)

    checker = SQSPolicyChecker(account)
    checker.check()

    for sqs_queue in checker.queues:
        sqs_queue.restrict_policy()

    checker_remediated = SQSPolicyChecker(account)
    checker_remediated.check()

    sqs_queues = [(queue, False) for queue in checker.queues]
    sqs_queues += [(queue, True) for queue in checker_remediated.queues]

    # create test cases for each response
    metafunc.parametrize("queue,remediated", sqs_queues, ids=ident_test)


@pytest.mark.sqspolicy
def test_sqs_policy(queue, remediated):
    """
    Actual testing function.

    :param queue: queue details
    :param remediated:
    :return: nothing, raises AssertionError if actual test result is not matched with expected
    """

    expected = True if remediated else find_rule_prop(queue, "CheckShouldPass", True)
    assert expected == (not queue.public)