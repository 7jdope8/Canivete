AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy your company's customizations of Antiope

Parameters:

  pBucketName:
    Description: Main Antiope Bucket Name
    Type: String

  pLambdaZipFile:
    Description: File Name for the lambdas
    Type: String

  pRoleName:
    Description: Default name of the AssumeRole to assume into accounts
    Type: String
    Default: Security-Audit

  pSmallLambdaSize:
    Description: Memory footprint for smaller Lambda
    Type: Number
    Default: 128

  pLargeLambdaSize:
    Description: Memory footprint for Lambdas processing lots of resources
    Type: Number
    Default: 768

  # Import DDB Tables from Antiope Inventory Stack
  pAccountTable:
    Description: Name of Account Table from Antiope Inventory Stack
    Type: String

  pVPCTable:
    Description: Name of VPC Table from Antiope Inventory Stack
    Type: String

  pBillingDataTable:
    Description: Name of BillingData Table from Antiope Inventory Stack
    Type: String

Resources:

  COMPANYCustomLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]
              - !Join ['', ['arn:aws:s3:::', !Ref pLegacyBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pLegacyBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: DynamoAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pAccountTable}"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pVPCTable}"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pVPCTable}/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pBillingDataTable}"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pBillingDataTable}/index/*"
            Action:
            - dynamodb:*
            Effect: Allow
      - PolicyName: AssumeCrossAccountRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pRoleName}"


  #
  # State Machine Functions
  #
  PopulateContactsFromSharepointLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-populate-contacts"
      Description: Populate the account table with sharepoint date
      Handler: populate-contacts-from-sharepoint.handler
      Runtime: python3.6
      Timeout: 300
      MemorySize: 512
      Role: !GetAtt COMPANYCustomLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          ANTIOPE_BUCKET: !Ref pBucketName
          ACCOUNT_TABLE: !Ref pAccountTable
          VPC_TABLE: !Ref pVPCTable
          ROLE_NAME: !Ref pRoleName
          # Specific to this function
      # Tags inherited from Stack


  COMPANYCustomErrorHandlingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-error-handler"
      Description: Handle Errors generated by the aws-COMPANYCustom system
      Handler: index.handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt COMPANYCustomLambdaRole.Arn
      Environment:
        Variables:
          COMPANYCustom_STACK_NAME: !Ref AWS::StackName
          CONFIG_FILE: "config.json"
          COMPANYCustom_BUCKET: !Ref pBucketName
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import json
          import logging
          import os
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Lambda main routine
          def handler(event, context):
              logger.info("Received event: " + json.dumps(event, sort_keys=True))

              sns_client = boto3.client('sns')
              sns_client.publish (
                TopicArn=os.environ['ALARM_TOPIC'],
                Message=json.dumps(event, sort_keys=True),
                Subject="{} Lambda Error".format(os.environ['COMPANYCustom_STACK_NAME'])
                )
              raise Exception(event['Cause'])
          ### End of Function

  #
  # StateMachine
  #

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt PopulateContactsFromSharepointLambdaFunction.Arn
              # INSERT All StepFunction ARNS here
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow

  COMPANYCustomProcessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Ref AWS::StackName
      DefinitionString: !Sub |-
        {
          "Comment": "(${AWS::StackName}) State Machine to run the COMPANY Customizations for Antiope",
          "StartAt": "PopulateContactsFromSharepointLambdaFunction",
          "States": {
            "ErrorHandlerState": {
              "Type": "Task",
              "Resource": "${COMPANYCustomErrorHandlingLambdaFunction.Arn}" ,
              "End": true
            },
            "PopulateContactsFromSharepointLambdaFunction": {
              "Type": "Task",
              "Resource": "${PopulateContactsFromSharepointLambdaFunction.Arn}",
              "Next": "CreateAccountReportLambdaFunction",
              "Catch": [
                {"ErrorEquals": ["ScorecardRunningException"], "Next": "WaitForStepFunctionToFinish", "ResultPath": "$.error-info"},
                {"ErrorEquals": ["States.ALL"], "Next": "ErrorHandlerState"}
              ]
            },
            "CreateAccountReportLambdaFunction": {
              "Type": "Task",
              "Resource": "${CreateAccountReportLambdaFunction.Arn}",
              "End": true,
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "ErrorHandlerState"
              }]
            },
            "WaitForStepFunctionToFinish": {
              "Type" : "Wait",
              "Seconds" : 300,
              "Next": "PopulateContactsFromSharepointLambdaFunction"
            }
          }
        }



  #
  # New Account Handling
  #

  # Add stuff here later (like GuardDuty enable)

  #
  # Parallel Execution Functions
  #

  # AMICOMPANYCustomLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "${AWS::StackName}-ami-COMPANYCustom"
  #     Description: COMPANYCustom AMIs in use
  #     Handler: COMPANYCustom-ami.lambda_handler
  #     Runtime: python3.6
  #     Timeout: 300
  #     MemorySize: !Ref pSmallLambdaSize
  #     Role: !GetAtt COMPANYCustomLambdaRole.Arn
  #     Code:
  #       S3Bucket: !Ref pBucketName
  #       S3Key: !Sub ${pLambdaZipFile}
  #     Environment:
  #       Variables:
  #         ROLE_SESSION_NAME: !Ref AWS::StackName
  #         COMPANYCustom_BUCKET: !Ref pBucketName
  #         ACCOUNT_TABLE: !Ref AccountDBTable
  #         VPC_TABLE: !Ref VpcCOMPANYCustomDBTable
  #         ROLE_NAME: !Ref pRoleName
  #     # Tags inherited from Stack
  # AMICOMPANYCustomLambdaFunctionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt AMICOMPANYCustomLambdaFunction.Arn
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Ref TriggerAccountCOMPANYCustomFunctionTopic
  #     Action: lambda:invokeFunction
  # AMICOMPANYCustomTopicToLambdaSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !GetAtt [AMICOMPANYCustomLambdaFunction, Arn]
  #     Protocol: lambda
  #     TopicArn: !Ref 'TriggerAccountCOMPANYCustomFunctionTopic'




  #
  # Dashboard
  #
  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 3,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AWS::StackName}-populate-contacts", { "stat": "Sum", "period": 604800, "label": "populate-contacts"} ],
                  [ "...", "${AWS::StackName}-create-account-report", { "stat": "Sum", "period": 604800, "label": "create-account-report" } ],
                  [ "...", "${AWS::StackName}-error-handler", { "stat": "Sum", "period": 604800, "label": "error-handler" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Invocation",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 9,
              "width": 24,
              "height": 3,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${AWS::StackName}-populate-contacts", { "stat": "Sum", "period": 604800, "label": "populate-contacts"} ],
                  [ "...", "${AWS::StackName}-create-account-report", { "stat": "Sum", "period": 604800, "label": "create-account-report" } ],
                  [ "...", "${AWS::StackName}-error-handler", { "stat": "Sum", "period": 604800, "label": "error-handler" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 24,
              "height": 6,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${AWS::StackName}-populate-contacts", { "stat": "Sum", "period": 900, "label": "populate-contacts"} ],
                  [ "...", "${AWS::StackName}-create-account-report", { "stat": "Sum", "period": 900, "label": "create-account-report" } ],
                  [ "...", "${AWS::StackName}-error-handler", { "stat": "Sum", "period": 900, "label": "error-handler" } ]
                ],
                "region": "${AWS::Region}",
                "view": "timeSeries",
                "stacked": false,
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${COMPANYCustomProcessStateMachine}", { "stat": "Sum", "period": 604800, "label": "Started" } ],
                  [ ".", "ExecutionsSucceeded", ".", ".", { "stat": "Sum", "period": 604800, "label": "Succeeded" } ],
                  [ ".", "ExecutionsFailed", ".", ".", { "stat": "Sum", "period": 604800, "label": "Failed" } ]
                ],
                "region": "${AWS::Region}",
                "title": "StateMachine Executions",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 27,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/States", "ExecutionTime", "StateMachineArn", "${COMPANYCustomProcessStateMachine}", { "stat": "Sum", "period": 300 } ]
                ],
                "region": "${AWS::Region}",
                "annotations": {
                  "horizontal": [{"label": "5Min", "value": 300000 }]
                },
                "title": "State Machine ExecutionTime",
                "period": 300,
                "yAxis": {"left": {"min": 0 } }
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 27,
              "width": 6,
              "height": 3,
              "properties": {
                "markdown": "\n# Quick Links\n* [StateMachine](https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${COMPANYCustomProcessStateMachine})\n* [S3 Bucket](https://s3.console.aws.amazon.com/s3/buckets/${pBucketName}/?region=${AWS::Region}&tab=overview)"
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 3,
              "styles": "undefined",
              "properties": {
                  "markdown": "\n# Stack Info\n* **Deploy Package**: ${pLambdaZipFile}\n* **StepFunction Arn**: ${COMPANYCustomProcessStateMachine}\n"
              }
            }
          ]
        }


Outputs:
  StackName:
    Value: !Ref AWS::StackName
    Description: Just the name of this stack

  COMPANYCustomStackVersion:
    Value: !Ref pLambdaZipFile
    Description: Object key to the Lambda package

  COMPANYCustomProcessStateMachineArn:
    Value: !Ref COMPANYCustomProcessStateMachine
    Description: Arn of the StepFunction to be called after the main inventory stack

